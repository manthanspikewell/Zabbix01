---
test case: Missing data.value_type field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: Missing data.steps[0].error_handler_params field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: Missing data.steps[0].params field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: Missing data.steps[0].error_handler field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: Missing data.steps[0].type field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0
            }
          ],
          "value_type": 0,
          "value": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: Missing data.history.timestamp field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "1"
        },
        "options": {
          "history": {
              "value": "0"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: Missing data.history.value field
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "1"
        },
        "options": {
          "history": {
              "timestamp": "now-1m" 
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: FAIL
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to data: 4$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "data: 4$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "data: 4"
        },
        {
          "result": "4"
        },
        {
          "result": "8"
        }
      ],
      "result": "8"
    }
---
test case: 'Apply mult(2) + trim($) + regsub("data: *(.*)", \1) to data: 4$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            },
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 0,
          "value": "data: 4$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "error": {
            "value": "/.*"
          }
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply trim($) + mult(2) + regsub("data: *(.*)", \1) to data: 4$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 0,
          "value": "data: 4$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "data: 4"
        },
        {
          "error": {
            "value": "/.*"
          }
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to data: x$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "data: x$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "data: x"
        },
        {
          "result": "x"
        },
        {
          "error": {
            "value": "/.*"
          }
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to 4$ with discard on fail' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 1,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "4$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "4"
        },
        {
          "result": null,
          "action": 1,
          "error": {
            "value": "/.*"
          }
        }
      ],
      "result": null
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to 4$ with set value to 5 on fail' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "5",
              "params": "data: *(.*)\n\\1",
              "error_handler": 2,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "4$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "4"
        },
        {
          "result": "5",
          "action": 2,
          "error": {
            "value": "/.*"
          }
        },
        {
          "result": "10"
        }
      ],
      "result": "10"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to 4$ with set error to Validation error on fail' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "Validation error",
              "params": "data: *(.*)\n\\1",
              "error_handler": 3,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "4$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
    "steps": [
        {
          "result": "4"
        },
        {
          "failed": "Validation error",
          "action": 3,

          "error": {
            "value": "/[^V][^a][^l][^i][^d].*"
          }
        }
      ],
      "error": "Validation error"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) to data: x$ for uint value' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 3,
          "value": "data: x$"
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "data: x"
        },
        {
          "result": "x"
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply regsub("data: *(.*)", \1) to data: x for uint value testing single step' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps":[
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 3,
          "value": "data: x"
        },
        "options": {
          "single": true
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "x"
        }
      ],
      "result": "x"
    }
---
test case: 'Apply delta() to 100, 700' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "",
              "error_handler": 0,
              "type": 9
            }
          ],
          "value_type": 0,
          "value": "700"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "100"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "600"
        }
      ],
      "result": "600"
    }
---
test case: 'Apply delta_per_second() to 100, 700' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "",
              "error_handler": 0,
              "type": 10
            }
          ],
          "value_type": 0,
          "value": "700"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "100"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "10"
        }
      ],
      "result": "10"
    }
---
test case: 'Apply mult(2) + trim($) + regsub("data: *(.*)", \1) to history data: 4$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            },
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 0,
          "value": "data: 4"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "data: 4$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "previous": true,
      "steps": [
        {
          "error": {
            "value": "/.*"
          }
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply trim($) + mult(2) + regsub("data: *(.*)", \1) to history data: 4$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 0,
          "value": "data: 4$"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "data: 4$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "previous": true,
      "steps": [
        {
          "result": "data: 4"
        },
        {
          "error": {
            "value": "/.*"
          }
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to history data: x$' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "data: 4$"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "data: x$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "previous": true,
      "steps": [
        {
          "result": "data: x"
        },
        {
          "result": "x"
        },
        {
          "error": {
            "value": "/.*"
          }
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to history 4$ with discard on fail' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 1,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "data: 3"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "4$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "data: 3"
        },
        {
          "result": "3"
        },
        {
          "result": "6"
        }
      ],
      "result": "6"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to history 4$ with set value to 5 on fail' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "5",
              "params": "data: *(.*)\n\\1",
              "error_handler": 2,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "data: 3"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "4$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "data: 3"
        },
        {
          "result": "3"
        },
        {
          "result": "6"
        }
      ],
      "result": "6"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) + mult(2) to history 4$ with set error to Validation error on fail' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "Validation error",
              "params": "data: *(.*)\n\\1",
              "error_handler": 3,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "2",
              "error_handler": 0,
              "type": 1
            }
          ],
          "value_type": 0,
          "value": "4$"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "4$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "previous": true,
      "steps": [
        {
          "result": "4"
        },
        {
          "failed": "Validation error",
          "action": 3,
          "error": {
            "value": "/[^V][^a][^l][^i][^d].*"
          }
        }
      ],
      "error": "Validation error"
    }
---
test case: 'Apply trim($) + regsub("data: *(.*)", \1) to history data: x$ for uint value' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "",
              "params": "$",
              "error_handler": 0,
              "type": 4
            },
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 3,
          "value": "data: 1$"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "data: x$"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "previous": true,
      "steps": [
        {
          "result": "data: x"
        },
        {
          "result": "x"
        }
      ],
      "error": "/.*"
    }
---
test case: 'Apply regsub("data: *(.*)", \1) to history data: x for uint value testing single step' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps":[
            {
              "error_handler_params": "",
              "params": "data: *(.*)\n\\1",
              "error_handler": 0,
              "type": 5
            }
          ],
          "value_type": 3,
          "value": "data: x"
        },
        "options": {
          "single": true,
          "history": {
            "timestamp": "now-1m",
            "value": "data: x$"
          }
        }
     },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "x"
        }
      ],
      "result": "x"
    }
---
test case: 'Apply regsub("data: *(.*)", \1) + delta() to data: 9, data:10' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "0",
              "params": "data: *(.*)\n\\1",
              "error_handler": 2,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "",
              "error_handler": 0,
              "type": 9
            }
          ],
          "value_type": 0,
          "value": "data: 10"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "data: 9"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "10"
        },
        {
          "result": "1"
        }
      ],
      "result": "1"
    }
---
test case: 'Apply regsub("data: *(.*)", \1) + delta() to data: 9, data:10' 
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "error_handler_params": "0",
              "params": "data: *(.*)\n\\1",
              "error_handler": 2,
              "type": 5
            },
            {
              "error_handler_params": "",
              "params": "",
              "error_handler": 0,
              "type": 9
            }
          ],
          "value_type": 0,
          "value": "data: 10"
        },
        "options": {
          "history": {
            "timestamp": "now-1m",
            "value": "x"
          }
        }
      },
      "request": "preprocessing.test",
      "sid": "6ed71f17963a881bd010e63b01c39484"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "result": "10"
        },
        {
          "result": "10"
        }
      ],
      "result": "10"
    }
---
test case: 'Check for not supported test (supported item, single step)'
in:
  request: |
    {
      "data": {
        "item": {
          "value": "value 123",
          "steps": [
            {
              "type": "26",
              "error_handler": "3",
              "error_handler_params": "\\0",
              "params": "0\n123"
            }
          ],
        "value_type": "1"
        },
        "options": {
          "state": "0"
        }
      },
      "request": "preprocessing.test",
      "sid": "400b58fe5ca56f23553bc68b35c9b571"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
           "result": "value 123"
        }
      ],
      "result": "value 123"
    }
---
test case: 'Check for not supported test (single step)'
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "type": "26",
              "error_handler": "3",
              "error_handler_params": "\\0",
              "params": "0\n123"
            }
          ],
          "value_type": "0"
        },
        "options": {
          "runtime_error": "error 123",
          "state": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "400b58fe5ca56f23553bc68b35c9b571"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "action": 3,
          "error": {
            "value":"error 123"
          },
          "failed":"123"
        }
      ],
      "error": "123"
    }
---
test case: 'Check for not supported test (single step without parameter)'
in:
  request: |
    {
      "data": {
        "item": {
          "value": "error",
          "steps": [
            {
              "type": "26",
              "error_handler": "3",
              "error_handler_params": "new error",
              "params": "-1\n"
            }
          ],
          "value_type": "0"
        },
        "options": {
          "state": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "400b58fe5ca56f23553bc68b35c9b571"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "action": 3,
          "error": {
            "value": "error"
          },
          "failed":"new error"
        }
      ],
      "error": "new error"
    }
---
test case: 'Check for not supported test (multiple step, supported item)'
in:
  request: |
    {
      "data": {
        "item": {
          "value": "value 123",
          "steps": [
            {
              "type": "26",
              "error_handler": "3",
              "error_handler_params": "\\0",
              "params": "0\n123"
            },
            {
              "type": "26",
              "error_handler_params": "333",
              "params": "0\n123",
              "error_handler": "3"
            },
            {
              "type": "26",
              "error_handler": "2",
              "error_handler_params": "444",
              "params": "1\n123"
            }
          ],
          "value_type": "1"
        },
        "options": {
          "state": "0"
        }
      },
      "request": "preprocessing.test",
      "sid": "400b58fe5ca56f23553bc68b35c9b571"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
           "result": "value 123"
        },
        {
           "result": "value 123"
        },
        {
           "result": "value 123"
        }

       ],
      "result": "value 123"
    }
---
test case: 'Check for not supported test (multiple step)'
in:
  request: |
    {
      "data": {
        "item": {
          "steps": [
            {
              "type": "26",
              "error_handler": "3",
              "error_handler_params": "\\0",
              "params": "0\n123"
            },
            {
              "type": "26",
              "error_handler_params": "333",
              "params": "0\n123",
              "error_handler": "3"
            },
            {
              "type": "26",
              "error_handler": "2",
              "error_handler_params": "444",
              "params": "1\n123"
            }
          ],
          "value_type": "0"
        },
        "options": {
          "runtime_error": "error 123",
          "state": "1"
        }
      },
      "request": "preprocessing.test",
      "sid": "400b58fe5ca56f23553bc68b35c9b571"
    }
out:
  return: SUCCEED
  response: |
    {
      "steps": [
        {
          "action": 3,
          "error": {
            "value": "error 123"
          },
          "failed":"123"
        },
        {
          "action": 3,
          "error": {
            "value":"123"
          },
          "failed": "333"
        },
        {
          "action": 2,
          "error": {
            "value":"333"
          },
          "result":"444"
        }
       ],
      "result": "444"
    }
---
test case: 'Check no cutoff'
in:
  value_gen_length: 524288
  value_append: ""
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: false
---
test case: 'Check cutoff'
in:
  value_gen_length: 524290
  value_append: ""
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: true
---
test case: 'Check cutoff before 2 byte'
in:
  value_gen_length: 524288
  value_append: "Ä"
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: true
---
test case: 'Check cutoff middle 2 byte'
in:
  value_gen_length: 524287
  value_append: "Ä"
out:
  return: SUCCEED
  expected_len: 524287
  expected_truncated: true
---
test case: 'Check cutoff before 3 byte'
in:
  value_gen_length: 524288
  value_append: "ế"
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: true
---
test case: 'Check cutoff middle 3 byte'
in:
  value_gen_length: 524286
  value_append: "ế"
out:
  return: SUCCEED
  expected_len: 524286
  expected_truncated: true
---
test case: 'Check cutoff before 4 byte'
in:
  value_gen_length: 524288
  value_append: "𨉟"
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: true
---
test case: 'Check cutoff middle 4 byte'
in:
  value_gen_length: 524285
  value_append: "𨉟"
out:
  return: SUCCEED
  expected_len: 524285
  expected_truncated: true
---
test case: 'Check no cutoff -1'
in:
  value_gen_length: 524287
  value_append: ""
out:
  return: SUCCEED
  expected_len: 524287
  expected_truncated: false
---
test case: 'Check no cutoff backslash'
in:
  value_gen_length: 524286
  value_append: "\\\\"
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: false
---
test case: 'Check cutoff backslash middle'
in:
  value_gen_length: 524287
  value_append: "\\\\"
out:
  return: SUCCEED
  expected_len: 524287
  expected_truncated: true
---
test case: 'Check cutoff backslash complete'
in:
  value_gen_length: 524288
  value_append: "\\\\"
out:
  return: SUCCEED
  expected_len: 524288
  expected_truncated: true
...

